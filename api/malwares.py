import json
from .. import configuration
from .core import BASEModel, BluelivRequest


class BluelivMalware(BASEModel):
    malware_id = None
    file = dict()
    status = None
    uploadDate = None
    malicious = None
    domains = list()
    hosts = list()
    detectedAntivirus = None
    totalAntivirus = None

    def __init__(self, *args, **kwargs):
        if 'malware_id' in kwargs:
            self.malware_id = kwargs.get('malware_id', None)

        if 'status' in kwargs:
            self.status = kwargs.get('status', None)

        if 'uploadDate' in kwargs:
            self.uploadDate = kwargs.get('uploadDate', None)

        if 'malicious' in kwargs:
            self.malicious = kwargs.get('malicious', None)

        if 'detectedAntivirus' in kwargs:
            self.detectedAntivirus = kwargs.get('detectedAntivirus', None)

        if 'totalAntivirus' in kwargs:
            self.last_name = kwargs.get('totalAntivirus', None)

        if 'file' in kwargs:
            self.file = kwargs.get('file', {})

        if 'domains' in kwargs:
            self.domains = kwargs.get('domains', [])

        if 'hosts' in kwargs:
            self.hosts = kwargs.get('hosts', [])

        super().__init__()


class BluelivUploadResponse(BASEModel):
    md5 = None
    sha256 = None
    platformType = None
    fileSize = 0
    uploadStatus = None
    fileName = None


class MalwaresRequest(BluelivRequest):
    _base_url = '/malwares'
    _malwares_upload_url = '/upload'
    page = 0
    pageSize = 0

    def __init__(self, *args, **kwargs):
        if 'token' in kwargs:
            self._custom_token = kwargs.get('token', None)

        if 'base_url' in kwargs:
            self._base_url = kwargs.get('base_url', '/malwares')
        else:
            self._base_url = configuration.BASE_MALWARES_URL

        if 'upload_url' in kwargs:
            self._malwares_upload_url = kwargs.get('upload_url', '/upload')
        else:
            self._malwares_upload_url = configuration.BASE_MALWARES_UPLOAD_URL

        if 'page' in kwargs:
            self.page = kwargs.get('page', 0)

        if 'pageSize' in kwargs:
            self.pageSize = kwargs.get('pageSize', 0)

        super().__init__(token=self._custom_token)

    def list(self, page=0, pageSize=0):
        params = {}

        if page != 0:
            params['page'] = page
        else:
            if self.page != 0:
                params['page'] = self.page

        if pageSize != 0:
            params['pageSize'] = pageSize
        else:
            if self.pageSize != 0:
                params['pageSize'] = self.pageSize

        results = self.request(resource=self._base_url,
                               params=params)

        return results

    def show(self, malware_id):
        resource = '%s/%s' % (self._base_url,
                             malware_id)
        results = self.request(resource=resource)

        return results

    def upload(self, filename):
        resource = '%s%s' % (self._base_url,
                             self._malwares_upload_url)
        fp = None
        try:
            fp = open(filename, 'rb')
        except:
            raise Exception('We found a problem with the file [%s]' % filename)

        file = {'file': (filename, fp)}
        results = self.request(resource=resource,
                               files=file)

        return results
